name: Application1

on:
    push:
        branches:
            - 'main'
            - 'pipeline'
#         paths:
#             - 'Application1/**'
    # pull_request:
    #     # types:
    #     #     - opened
    #     branches:
    #         - 'main'
    #         - 'feature/*'
        # paths:
        #     - 'Application1/**'
    workflow_dispatch:
        

jobs:
    # build:
    #     runs-on: windows-latest
    #     steps:
    #         - name: Checkout
    #           uses: actions/checkout@v3.5.3
    #         - name: shell_script_Application1
    #           run: |
    #             dir
    #             pwd.
    #           working-directory: Application4
    #         - name: Setup .NET Core SDK
    #           uses: actions/setup-dotnet@v3.2.0
    #           with:
    #             dotnet-version: 6.0.x
    #         - name: Install dependencies
    #           if: success() 
    #           # && github.ref == 'refs/heads/feature/sample' || github.ref == 'refs/heads/main'
    #           run: |
    #             dir
    #             # dotnet workload install maui
    #         - name: Setup .NET Core SDK
    #           if: failure()
    #           uses: actions/setup-dotnet@v3.2.0
    #           with:
    #             dotnet-version: 6.0.x
    #         - name: Install dependencies
    #           if: success() 
    #           # && github.ref == 'refs/heads/feature/sample' || github.ref == 'refs/heads/main'
    #           run: |
    #             dir
    #             # dotnet workload install maui

    # build1:
    #     needs: build
    #     runs-on: ubuntu-20.04
    #     if: success() && github.ref == 'refs/heads/feature/sample' || github.ref == 'refs/heads/main'
    #     steps:
    #         - name: shell_script_Application1
    #           run: |
    #             ls
    #             pwd
    job1:
      runs-on: ubuntu-latest
      # Map a step output to a job output
      outputs:
        output1: ${{ steps.step1.outputs.front_end }}
        output2: ${{ steps.step1.outputs.pipeline }}
      steps:
        - name: Checkout
          uses: actions/checkout@v3.5.3
        - id: step1
          run: |
            # changedFiles=$(git diff-tree --no-commit-id --name-only -r $GITHUB_SHA)
            # changedFiles_pipeline=$(git diff --name-only HEAD .github)
            git diff --quiet HEAD .github
            if [ $? -eq 0 ]; then
              echo "front_end=true" >> "$GITHUB_OUTPUT"
            else
              echo "front_end=false" >> "$GITHUB_OUTPUT"
            fi
            # if [ $changedFiles_pipeline == 0 ]; then
            #   echo "front_end=true" >> "$GITHUB_OUTPUT"
            # else
            #   echo "front_end=false" >> "$GITHUB_OUTPUT"
            # fi
          # run: |
          #   modified_fies=$(git diff --name-only HEAD)
          #   echo "$modified_fies" | grep -qE '^\.github/' && echo "front_end=true" >> "$GITHUB_OUTPUT" || echo "front_end=false" >> "$GITHUB_OUTPUT"
        - id: step2
          run: git diff --quiet HEAD .github
    job2:
      if: needs.job1.outputs.output1 == 'true' 
      runs-on: ubuntu-latest
      needs: job1
      steps:
        - env:
            OUTPUT1: ${{needs.job1.outputs.output1}}
          run: echo "Hello from FE"
    job3:
      if: needs.job1.outputs.output2 == 'true' 
      runs-on: ubuntu-latest
      needs: job1
      steps:
        - run: echo "Helloo from pipeline"

    job4:
      if: needs.job1.outputs.output1 == 'false' 
      runs-on: ubuntu-latest
      needs: job1
      steps:
        - run: echo "$(git diff-tree --no-commit-id --name-only -r $GITHUB_SHA)"